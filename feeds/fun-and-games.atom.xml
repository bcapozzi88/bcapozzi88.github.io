<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Brian Capozzi</title><link href="http://bcapozzi88.github.io/" rel="alternate"></link><link href="http://bcapozzi88.github.io/feeds/fun-and-games.atom.xml" rel="self"></link><id>http://bcapozzi88.github.io/</id><updated>2014-10-28T00:00:00-04:00</updated><entry><title>Word Search</title><link href="http://bcapozzi88.github.io/blog/2014/10/28/word-search/" rel="alternate"></link><updated>2014-10-28T00:00:00-04:00</updated><author><name>Brian Capozzi</name></author><id>tag:bcapozzi88.github.io,2014-10-28:blog/2014/10/28/word-search/</id><summary type="html">&lt;hr /&gt;
&lt;h2&gt;Word Search&lt;/h2&gt;
&lt;p&gt;I thought it might be fun to try and write a program that somehow generates a crossword puzzle (or at least assists in creating one). This seemed like a pretty involved task, so a friend suggested I first start with a much simpler task: creating a word search. I finally got around to implementing this, and the first version can be found on my github at &lt;a href="https://github.com/bcapozzi88/Word_Search"&gt;https://github.com/bcapozzi88/Word_Search&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was basically just fun for me, but it got me thinking about how to go about creating and populating a grid with words, while being mindful of potential intersections between words. It also got me to use python's 'random' package for randomly deciding such factors as whether words should appear horizontally or vertically, and whether they should be placed in the grid from start to end or end to start. After placing all the words from the user-defined word-list, the program then fills in the remaining squares with random letters (though I guess to ramp up the difficulty, it should only use letters that appear in the words from the word-list). Once finished, the program then prints the completed word search.&lt;/p&gt;</summary></entry></feed>